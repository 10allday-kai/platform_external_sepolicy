#!/bin/sh

##
# A simple wrapper script around buildbundle that puts
# the mmac policy files in the correct order as well
# as correctly labels the output zip file. buildbundle
# is not context aware w.r.t the correct ordering of
# mmac files and so this wrapper script is needed.
#

usage()
{
cat << EOF

usage: buildmmacbundle -k <private key.pk8> [-v <version>] [-r <previous hash>] \
[-e <enforcing>] [-h] -- <mac_permissions.xml>

This script builds a mmac policy bundle and supporting
metadata file capable of being loaded via the ConfigUpdate
mechanism. It takes a pkcs8 DER encoded RSA private key
that is then used to sign the bundle. For AOSP development
you'll typically want to use the key from the source tree at
build/target/product/security/testkey.pk8. If building
your own cert you should probably use a key size of least
1024 or greater. The bundle requires that the mac_permissions.xml
be included and with that exact basename. The built bundle will
be written to mmac_bundle.zip which will include the
signature metadata file of the bundle. An optional enforcing
mode can also be included which will allow the shipped bundle
to be put into enforcing or permissive mode.

OPTIONS:
   -h      Show this message.
   -v      Version of the built bundle. Defaults to 1.
   -r      SHA-512 hash of the bundle to replace. Defaults to 'NONE'.
   -e      Whether or not the policy will be put into enforcing mode.
           1 for true, 0 for false. Defaults to 0.

EOF
}

VERSION="1"
HASH="NONE"
KEY=
MAC_PERMISSIONS=
ENFORCE="0"
OUTPUT=mmac_bundle.zip
while getopts "k:v:r:e:h" OPTION
do
     case $OPTION in
         k)
             KEY=$OPTARG
             ;;
         v)
             VERSION=$OPTARG
             ;;
         r)
             HASH=$OPTARG
             ;;
         e)
             ENFORCE=$OPTARG
             ;;
         h)
             usage
             exit 1
             ;;
         ?)
             usage
             exit 1
             ;;
     esac
done

shift $((OPTIND-1))

# Infer from the basenames the correct mmac policy
for POLICY in $@
do
    case `basename $POLICY` in
        mac_permissions.xml)
            MAC_PERMISSIONS=$POLICY
            ;;
        ?)
            # intentionally ignore?
            ;;
    esac
done

# We require that mac_permissions.xml and the private key both be present.
if [ -z $MAC_PERMISSIONS ] || [ -z $KEY ]
then
     usage
     exit 1
fi

# Notice the order of the policy files matter here. The backend expects
# a set order. Any change there (SELinuxPolicyInstallReceiver.java) will
# result in a change here. Also note that buildbundle takes a generic
# -m option, so we convert our -e to -m here.
BUILDBUNDLE_COMMAND="buildbundle -k $KEY -v $VERSION -r $HASH -o $OUTPUT -m $ENFORCE $MAC_PERMISSIONS"
$BUILDBUNDLE_COMMAND
