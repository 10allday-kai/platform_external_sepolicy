#!/bin/sh

##
# A simple wrapper script around buildbundle that puts
# the mmac policy files in the correct order as well
# as correctly labels the output zip file. buildbundle
# is not context aware w.r.t the correct ordering of
# mmac files and so this wrapper script is needed.
#

usage()
{
cat << EOF

usage: buildmmacbundle -k <private key.pk8> [-v <version>] [-r <previous hash>] \
[-h] -- <mac_permissions.xml>

This script builds a mmac policy bundle and supporting
metadata file capable of being loaded via the ConfigUpdate
mechanism. It takes a pkcs8 DER encoded RSA private key
that is then used to sign the bundle. For AOSP development
you'll typically want to use the key from the source tree at
build/target/product/security/testkey.pk8. If building
your own cert you should probably use at least a key size of
1024 or greater. The bundle requires that the mac_permissions.xml
be included and with that exact basename. The built bundle will
be written to mmac_bundle.zip which will include the
signature metadata file of the bundle.

OPTIONS:
   -h      Show this message.
   -v      Version of the built bundle. Defaults to 1.
   -r      SHA-512 hash of the bundle to replace. Defaults to 'NONE'.

EOF
}

VERSION="1"
HASH="NONE"
KEY=
MAC_PERMISSIONS=
OUTPUT=mmac_bundle.zip
while getopts "k:v:r:h" OPTION
do
     case $OPTION in
         k)
             KEY=$OPTARG
             ;;
         v)
             VERSION=$OPTARG
             ;;
         r)
             HASH=$OPTARG
             ;;
         h)
             usage
             exit 1
             ;;
         ?)
             usage
             exit 1
             ;;
     esac
done

shift $((OPTIND-1))

# Infer from the basenames the correct mmac policy
for POLICY in $@
do
    case `basename $POLICY` in
        mac_permissions.xml)
            MAC_PERMISSIONS=$POLICY
            ;;
        ?)
            # intentionally ignore?
            ;;
    esac
done

# We require that mac_permissions.xml and the private key both be present.
if [ -z $MAC_PERMISSIONS ] || [ -z $KEY ]
then
     usage
     exit 1
fi

# Notice the order of the policy files matter here. The backend expects
# a set order. Any change there (SELinuxPolicyInstallReceiver.java) will
# result in a change here.
BUILDBUNDLE_COMMAND="buildbundle -k $KEY -v $VERSION -r $HASH -o $OUTPUT $MAC_PERMISSIONS"
$BUILDBUNDLE_COMMAND
